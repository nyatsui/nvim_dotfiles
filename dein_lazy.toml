# [[plugins]]
# repo = 'Shougo/vimproc.vim'
# build = 'make'

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# if = 'has("python3")'
# on_event = 'InsertEnter'
# hook_add = '''
# let g:deoplete#enable_at_startup = 1
#
# " <TAB>: completion.
# inoremap <silent><expr> <TAB>
#      \ pumvisible() ? "\<C-n>" :
#      \ <SID>check_back_space() ? "\<TAB>" :
#      \ deoplete#manual_complete()
# function! s:check_back_space() abort "{{{
#   let col = col('.') - 1
#   return !col || getline('.')[col - 1]  =~ '\s'
# endfunction"}}}
#
# " <S-TAB>: completion back.
# inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
#
# " <CR>: close popup and save indent.
# inoremap <expr><CR>  pumvisible() ? deoplete#close_popup() : "<CR>"
#
# " let g:deoplete#sources#jedi#worker_threads = 2
# '''
#
# hook_source = '''
# call deoplete#custom#option('camel_case', v:true)
# call deoplete#custom#option('refresh_always', v:true)
# call deoplete#custom#option('auto_complete_delay', 0)
# call deoplete#custom#option('async_timeout', 100)
# '''
#
# [[plugins]]
# repo = 'Shougo/deoplete-clangx'
# on_ft = ['c', 'cpp']

# [[plugins]]
# repo = 'davidhalter/jedi-vim'
# on_ft = 'python'
# hook_add = '''
# let g:jedi#completions_enabled = 0
# '''
# 
# [[plugins]]
# repo = 'zchee/deoplete-jedi'
# on_event = 'InsertEnter'
# on_ft = 'python'
# hook_add = '''
# let g:deoplete#sources#jedi#show_docstring = 0
# '''

[[plugins]]
repo = 'Shougo/neomru.vim'

# [[plugins]]
# repo = 'Shougo/denite.nvim'
# depends = ['neomru.vim']
# if = 'has("python3")'
# on_cmd = 'Denite'
# hook_add = '''
# nnoremap <silent> <C-u><C-t> :<C-u>Denite filetype<CR>
# inoremap <silent> <C-p> <Esc>:<C-u>Denite buffer/project file/rec<CR>
# nnoremap <silent> sp :<C-u>Denite buffer file/rec<CR>
# nnoremap <silent> sc :<C-u>DeniteBufferDir file/rec<CR>
# nnoremap <silent> sB :<C-u>Denite buffer<CR>
# nnoremap <silent> sb :<C-u>Denite buffer/project<CR>
# nnoremap <silent> sC :<C-u>DeniteBuffer buffer/project<CR>
# nnoremap <silent> <C-u><C-j> :<C-u>Denite line<CR>
# nnoremap <silent> <C-u><C-g> :<C-u>Denite grep<CR>
# nnoremap <silent> <C-u><C-]> :<C-u>DeniteCursorWord grep<CR>
# nnoremap <silent> <C-u><C-u> :<C-u>Denite file_mru<CR>
# nnoremap <silent> su :<C-u>Denite file_mru<CR>
# nnoremap <silent> <C-u><C-y> :<C-u>Denite neoyank<CR>
# nnoremap <silent> <C-u><C-r> :<C-u>Denite -resume<CR>
# nnoremap <silent> sy :<C-u>Denite neoyank<CR>
# nnoremap <silent> sg :<C-u>Denite -buffer-name=search -auto-action='preview' -no-start-filter
#      \ -no-empty grep<CR>
# nnoremap <silent> sn :<C-u>Denite -buffer-name=search -auto-action='highlight' -no-start-filter
#      \ -resume -refresh -cursor-pos=+1 <CR>
# nnoremap <silent> s;
#      \ :<C-u>Denite command_history command <CR>
# nnoremap <silent> so
#      \ :<C-u>Denite jump change <CR>
# 
# nnoremap <silent><expr> s/ wordcount().chars > 30000 ?
#\ ":\<C-u>Denite -buffer-name=search -start-filter -auto-action='highlight'
#\  -search line/external\<CR>" :
#\ ":\<C-u>Denite -buffer-name=search -start-filter -auto-action='highlight'
#\  -search line:forward\<CR>"
# nnoremap <silent><expr> * wordcount().chars > 30000 ?
#\ ":\<C-u>DeniteCursorWord -buffer-name=search -no-start-filter -auto-action='highlight' -search line/external\<CR>" :
#\ ":\<C-u>DeniteCursorWord -buffer-name=search -no-start-filter -auto-action='highlight' -search line:forward\<CR>"
# xnoremap <silent> *
#\ "qy:Denite -input=`@q` -buffer-name=search -no-start-filter -auto-action='highlight' -search line:forward<CR>"
# 
# nnoremap <silent> ;r
#    \ :<C-u>Denite -buffer-name=register
#    \ register neoyank<CR>
# xnoremap <silent> ;r
#    \ :<C-u>Denite -default-action=replace -buffer-name=register
#    \ register neoyank<CR>
# 
# function! s:denite_my_settings() abort
#    nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
#    nnoremap <silent><buffer><expr> p denite#do_map('do_action', 'preview')
#    nnoremap <silent><buffer><expr> <esc> denite#do_map('quit')
#    nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
#    nnoremap <silent><buffer><expr> q denite#do_map('quit')
#    nnoremap <silent><buffer><expr> i denite#do_map('open_filter_buffer')
#    nnoremap <silent><buffer><expr> a denite#do_map('open_filter_buffer')
#    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
#    nnoremap <silent><buffer><expr> <tab> denite#do_map('choose_action')
#    nnoremap <silent><buffer><expr> <C-x> denite#do_map('do_action', 'quick_move')
# endfunction
# 
# function! s:denite_filter_my_settings() abort
#   " open and close preview window
#   inoremap <silent><buffer><expr> <CR> denite#do_map('do_action').':<C-u>pc<CR>'
#   inoremap <silent><buffer><expr> <tab> denite#do_map('choose_action')
#   " quit and close preview window
#   inoremap <silent><buffer><expr> <esc> denite#do_map('quit').':<C-u>pc<CR>'
#   imap <silent><buffer> <C-c> <Plug>(denite_filter_quit)
#   inoremap <silent><buffer> <C-g>
# \ <Esc><C-w>p:call cursor(line('.')+1,0)<CR>:call denite#call_map('open_filter_buffer')<CR>
#   inoremap <silent><buffer> <C-t>
# \ <Esc><C-w>p:call cursor(line('.')-1,0)<CR>:call denite#call_map('open_filter_buffer')<CR>
#   " call deoplete#custom#buffer_option('auto_complete', v:false)
#   nnoremap <silent><buffer><expr> <C-l> denite#do_map('redraw')
# endfunction
# 
# augroup DENITE
#     autocmd!
#     autocmd FileType denite call s:denite_my_settings()
#     autocmd FileType denite-filter call s:denite_filter_my_settings()
# augroup end
# 
# '''
# hook_post_source = '''
#  if executable('pt')
#    call denite#custom#var('file/rec', 'command',
# \ ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '--ignore=.git/*', (has('win32') ? '-g:' : '-g='), ''])
#    call denite#custom#var('grep', 'command',
# \ ['pt', '--nogroup', '--nocolor', '--smart-case', '--hidden', '--ignore=.git/*'])
#    call denite#custom#var('grep', 'default_opts', [])
#    call denite#custom#var('grep', 'recursive_opts', [])
#  else
#    call denite#custom#var('file/rec', 'command', ['scantree.py'])
#  endif
# 
#  call denite#custom#source('file/rec', 'matchers',
#\ ['matcher/fruzzy'])
#  call denite#custom#source('buffer', 'matchers',
#\ ['matcher/fruzzy', 'matcher/ignore_current_buffer'])
#  call denite#custom#alias('source', 'file/rec/git', 'file/rec')
#  call denite#custom#var('file/rec/git', 'command',
#    \ ['git', 'ls-files', '-co', '--exclude-standard'])
#  call denite#custom#source(
#    \ 'file_mru', 'matchers', ['matcher/fruzzy', 'matcher_project_files'])
#  call denite#custom#source('file_old', 'matchers',
#     \ ['matcher/fruzzy', 'matcher_project_files'])
#  call denite#custom#alias('source', 'buffer/project', 'buffer')
#  call denite#custom#source('buffer/project', 'matchers',
#     \ ['matcher/fruzzy', 'matcher_project_files', 'matcher/ignore_current_buffer'])
# 
#  " Change ignore_globs
#  call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
#      \ [ '.git/', '.ropeproject/', '__pycache__/',
#      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])
# 
# 
# call denite#custom#option('_', {
#     \ 'cached_filter': v:true,
#     \ 'cursor_shape': v:true,
#     \ 'cursor_wrap': v:true,
#     \ 'highlight_filter_background': 'DeniteFilter',
#     \ 'highlight_matched_char': 'Underlined',
#     \ 'prompt': '> ',
#     \ 'split': 'floating',
#     \ 'start_filter': v:true,
#     \ 'statusline': v:false,
#     \ 'max_dynamic_update_candidates': 1000000,
#     \ })
# '''

# [[plugins]]
# repo = 'critiqjo/lldb.nvim'
# on_ft = ['c', 'cpp']
# hook_add = '''
#     nmap <M-b> <Plug>LLBreakSwitch
#     vmap <F2> <Plug>LLStdInSelected
#     nnoremap <F4> :LLstdin<CR>
#     nnoremap <F5> :LLmode debug<CR>
#     nnoremap <S-F5> :LLmode code<CR>
#     nnoremap <F8> :LL continue<CR>
#     nnoremap <S-F8> :LL process interrupt<CR>
#     nnoremap <F9> :LL print <C-R>=expand('<cword>')<CR>
#     vnoremap <F9> :<C-U>LL print <C-R>=lldb#util#get_selection()<CR><CR>
# '''
# 
# [[plugins]]
# repo = 'Shougo/deol.nvim'
# on_cmd = 'Deol'
# depends = ['ddc.vim']
# hook_add = '''
#   nnoremap <silent> [Window]N :<C-u>call deol#new({'command': 'bash'})<CR>
#   nnoremap <silent> [Space]s :<C-u>Deol zsh <CR>
#   nnoremap <silent> [Window]D  :<C-u>call deol#kill_editor()<CR>
# '''
# hook_source = '''
#   let g:deol#prompt_pattern = '\w*%'
#   autocmd FileType deol call s:on_deol()
#   function! s:on_deol() abort
#     nnoremap <silent><buffer> sq sq
#   endfunction
# '''
# 
# [[plugins]]
# repo = 'Shougo/neoyank.vim'
# on_if = 1
# on_event = 'TextYankPost'
# on_source = ['denite.nvim']

# [[plugins]]
# repo = "huawenyu/neogdb.vim"
# on_ft = ['c', 'cpp']

# [[plugins]]
# repo = 'plasticboy/vim-markdown'
# on_ft = ['markdown']
# hook_add = '''
# let g:vim_markdown_folding_disabled = 1
# " let g:vim_markdown_folding_level = 6
# '''
# 
# [[plugins]]
# repo = 'dhruvasagar/vim-table-mode'
# on_ft = ['markdown']
# hook_add = '''
# let g:table_mode_corner="|"
# '''

# [[plugins]]
# repo = 'Shougo/neoinclude.vim'

# [[plugins]]
# repo = 'raghur/fruzzy'
# on_source = ['denite.nvim']
# hook_source = '''
# let g:fruzzy#usenative = 1
# let g:fruzzy#sortonempty = 0
# '''
# hook_post_update = 'call fruzzy#install()'

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

# [[plugins]]
# repo   = 'vim-scripts/renamer.vim'
# on_cmd = ['Renamer']

# [[plugins]]
# repo = 'bfredl/nvim-ipy'

# [[plugins]]
# repo = 'Shougo/defx.nvim'
# hook_add = '''
# nnoremap <silent>   [Space]f
#\ :<C-u>Defx -listed -resume -winwidth=200 -buffer-name=tab`tabpagenr()`<CR>
# nnoremap <silent>   [Space]t
#\ :<C-u>Defx -split=vertical -direction=topleft -resume -columns=mark:indent:icon:filename -winwidth=35 -buffer-name=tab`tabpagenr()`<CR>
# 
# autocmd FileType defx call s:defx_my_settings()
# function! s:defx_my_settings() abort
#   " Define mappings
#   nnoremap <silent><buffer><expr> <CR>
# \ defx#async_action('open')
#   nnoremap <silent><buffer><expr> O
# \ defx#async_action('drop')
#   nnoremap <silent><buffer><expr> c
# \ defx#do_action('copy')
#   nnoremap <silent><buffer><expr> !
# \ defx#do_action('execute_command')
#   nnoremap <silent><buffer> m m
#   nnoremap <silent><buffer><expr> m
# \ defx#do_action('move')
#   nnoremap <silent><buffer><expr> p
# \ defx#do_action('paste')
#   nnoremap <silent><buffer><expr> l
# \ defx#async_action('open_directory')
#   nnoremap <silent><buffer><expr> E
# \ defx#do_action('open', 'vsplit')
#   nnoremap <silent><buffer><expr> P
# \ defx#do_action('open', 'pedit')
#   nnoremap <silent><buffer><expr> o
# \ defx#is_directory() ?
# \ defx#do_action('open_or_close_tree') :
# \ defx#async_action('drop')
#   nnoremap <silent><buffer><expr> K
# \ defx#do_action('new_directory')
#   nnoremap <silent><buffer><expr> N
# \ defx#do_action('new_file')
#   nnoremap <silent><buffer><expr> M
# \ defx#do_action('new_multiple_files')
#   nnoremap <silent><buffer><expr> dd
# \ defx#do_action('remove_trash')
#   nnoremap <silent><buffer><expr> r
# \ defx#do_action('rename')
#   nnoremap <silent><buffer><expr> x
# \ defx#do_action('execute_system')
#   nnoremap <silent><buffer><expr> >
# \ defx#do_action('toggle_ignored_files')
#   nnoremap <silent><buffer><expr> .
# \ defx#do_action('repeat')
#   nnoremap <silent><buffer><expr> yy
# \ defx#do_action('yank_path', ":t")
#   nnoremap <silent><buffer><expr> ya
# \ defx#do_action('yank_path')
#   nnoremap <silent><buffer><expr> h
# \ defx#do_action('cd', ['..'])
#   nnoremap <silent><buffer><expr> ~
# \ defx#do_action('cd')
#   nnoremap <silent><buffer><expr> \
# \ defx#do_action('cd', getcwd())
#   nnoremap <silent><buffer><expr> q
# \ defx#do_action('quit')
#   nnoremap <silent><buffer> sq sq
#   nnoremap <silent><buffer><expr> <Space>
# \ defx#do_action('toggle_select') . 'j'
#   vnoremap <silent><buffer><expr> <Space>
# \ defx#do_action('toggle_select_visual')
#   nnoremap <silent><buffer><expr> *
# \ defx#do_action('toggle_select_all')
#   nnoremap <silent><buffer><expr> j
# \ line('.') == line('$') ? 'gg' : 'j'
#   nnoremap <silent><buffer><expr> k
# \ line('.') == 1 ? 'G' : 'k'
#   nnoremap <silent><buffer><expr> <C-l>
# \ defx#do_action('redraw')
#   nnoremap <silent><buffer><expr> <C-g>
# \ defx#do_action('print')
#   nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
# \ ':<C-u>wincmd w<CR>' :
# \ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
#  nnoremap <silent><buffer><expr> C
# \ defx#do_action('toggle_columns',
# \                'mark:indent:icon:filename:type:size:time')
# endfunction
# '''
#
# hook_post_source = '''
# call defx#custom#column('filename', {
#     \ 'min_width': 80,
#     \ 'max_width': 300,
#     \ })
# '''

# [[plugins]]
# repo = 'tbodt/deoplete-tabnine'
# depends = ['deoplete.nvim']
# on_event = ['InsertEnter']
# hook_post_update = '''
# if has('win32') || has('win64')
#   let cmd = 'powershell.exe .\install.ps1'
# else
#   let cmd = './install.sh'
# endif
# let g:dein#plugin.build = cmd
# '''

# [[plugins]]
# repo = 'iamcco/markdown-preview.nvim'
# on_ft = ['markdown', 'pandoc.markdown', 'rmd']
# build = 'cd app & yarn install'
# hook_add = '''
# let g:mkdp_open_to_the_world = 1
# let g:mkdp_echo_preview_url = 1
# '''
# 
# [[plugins]]
# repo = 'lambdalisue/vim-findent'

# [[plugins]]
# repo = 'ncm2/float-preview.nvim'
# on_source = 'deoplete.nvim'
# if = 'has("nvim")'
# hook_source = '''
#   let g:float_preview#docked = 0
#   let g:float_preview#max_width = 60
#   let g:float_preview#max_height = 20
# '''

# [[plugins]]
# repo = 'tyru/columnskip.vim'
# on_map = {n = '<Plug>'}
# hook_add = '''
#   nmap gj <Plug>(columnskip-j)
#   nmap gk <Plug>(columnskip-k)
#   omap gj <Plug>(columnskip-j)
#   xmap gk <Plug>(columnskip-k)
#   xmap gj <Plug>(columnskip-j)
#   omap gk <Plug>(columnskip-k)
# '''

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# depends = ['neosnippet-snippets', 'context_filetype.vim']
# on_event = 'InsertCharPre'
# on_ft = 'snippet'
# hook_source = '''
#   imap <silent><C-k>  <Plug>(neosnippet_jump_or_expand)
#   smap <silent><C-k>  <Plug>(neosnippet_jump_or_expand)
#   xmap <silent><C-k>  <Plug>(neosnippet_expand_target)
#   let g:neosnippet#enable_snipmate_compatibility = 1
#   let g:neosnippet#enable_completed_snippet = 1
#   let g:neosnippet#expand_word_boundary = 1
#   " let g:neosnippet#snippets_directory = '~/.vim/snippets'
# '''

# [[plugins]]
# repo = 'Shougo/deoppet.nvim'
# if = 'has("python3")'
# depends = ['neosnippet-snippets', 'context_filetype.vim']
# on_event = 'InsertCharPre'
# hook_source = '''
#   " Test<Plug>
#   imap <C-k>  <Plug>(deoppet_expand)
#   imap <C-f>  <Plug>(deoppet_jump_forward)
#   imap <C-b>  <Plug>(deoppet_jump_backward)
#   call deoppet#custom#option('snippets_dirs',
# \ globpath(&runtimepath, 'neosnippets', 1, 1))
# '''

# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'vim-denops/denops.vim'

# [[plugins]]
# repo = 'nathom/filetype.nvim'
# if = 'has("nvim")'
# hook_source = '''
#   " Do not source the default filetype.vim
#   let g:did_load_filetypes = 1
# '''
# 
# [[plugins]]
# repo = 'Shougo/neco-vim'
# on_ft = ['vim', 'toml', 'markdown']
# depends = 'ddc.vim'
# hook_source = '''
#   call ddc#custom#patch_filetype(
#          \ ['vim'], 'sources', ['necovim', 'around', 'file']
#          \ )
# '''
# 
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_ft = ['typescript', 'python']
if = 'has("nvim")'
depends = 'ddc.vim'
hook_source = '''
  lua << EOF
  local nvim_lsp = require('lspconfig')

  local on_attach = function (client, bufnr)
      local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
      local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

      local opts = { noremap=true, silent=true }
      buf_set_keymap('n', 'gd', '<Cmd>lua vim.lsp.buf.definition()<CR>', opts)
      buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
      buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
      buf_set_keymap('n', 'K', '<Cmd>lua vim.lsp.buf.hover()<CR>', opts)
      buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
      buf_set_keymap('n', 'gs', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
      buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
      buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
      buf_set_keymap('n', 'gx', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
      buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
      buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
      buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
      buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
      buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
      buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
      buf_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
      buf_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
      buf_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
      buf_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)
      buf_set_keymap('n', '[Window]f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
  end

  local lsp_installer = require("nvim-lsp-installer")
  lsp_installer.on_server_ready(function(server)
    local opts = {}
    opts.on_attach = on_attach
    server:setup(opts)
    vim.cmd [[ do User LspAttachBuffers ]]
  end)
EOF
'''

[[plugins]]
repo ='williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'
