[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
autocmd ColorScheme * highlight Comment ctermfg=40 guifg=#008800
autocmd ColorScheme * highlight Visual  ctermbg=236 guibg=grey22
autocmd ColorScheme * hi CursorLine  cterm=NONE ctermbg=236 ctermfg=NONE guibg=grey17 guifg=NONE
autocmd ColorScheme * hi Search cterm=NONE ctermfg=NONE ctermbg=243 guibg=midnightblue guifg=NONE
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add = '''
let g:precious_enable_switchers = {
    \"markdown" : {
    \    "setfiletype" : 0
    \},
    \}
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
nnoremap <silent>gp :<C-u>GitGutterPreviewHunk<CR>
'''

[[plugins]]
repo = "https://github.com/tyru/caw.vim.git"
hook_add = '''
let g:caw_no_default_keymappings = 1
nmap <C-_> <Plug>(caw:hatpos:toggle)
vmap <C-_> <Plug>(caw:hatpos:toggle)
nmap <C-/> <Plug>(caw:hatpos:toggle)
vmap <C-/> <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
# repo = 'Townk/vim-autoclose'
repo = 'ivang/vim-autoclose'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''
" カーソルキーでbuffer移動
" nnoremap <Left> :bp<CR>
" nnoremap <Right> :bn<CR>
" nnoremap <C-h> :bp<CR>
" nnoremap <C-l> :bn<CR>
" Smarter tab line有効化
let g:airline#extensions#tabline#enabled = 1
" powerline font
let g:airline_powerline_fonts = 1
" vim-airline-themes
let g:airline_theme='behelit'
" AsyncRun
" let g:asyncrun_status = ''
" let g:airline_section_error = airline#section#create_right(['%{g:asyncrun_status}'])
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
" map <C-n> :NERDTreeToggle<CR>
'''

# [[plugins]]
# repo = 'tpope/vim-surround'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = ['vim-operator-user']
hook_add = '''
map sr <Plug>(operator-replace)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = ['vim-operator-user']
hook_add = '''
nmap <silent>sa <Plug>(operator-surround-append)
nmap <silent>sd <Plug>(operator-surround-delete)
nmap <silent>sr <Plug>(operator-surround-replace)
'''

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-fold'
depends = ['vim-textobj-user']

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if  = '''
!has('nvim')
'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if  = '''
!has('nvim')
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
hook_add = '''
let g:extra_whitespace_ignored_filetypes = ['deol']
'''

[[plugins]]
repo = 'zebult/auto-gtags.vim'
hook_add = '''
let g:auto_update_gtags = 1
'''

[[plugins]]
repo = 'lighttiger2505/gtags.vim'
hook_add = '''
    " Options
    let g:Gtags_Auto_Map = 0
    let g:Gtags_OpenQuickfixWindow = 1
    " Keymap
    " Show definetion of function cousor word on quickfix
    nmap <silent> K :<C-u>exe("Gtags ".expand('<cword>'))<CR>
    " Show reference of cousor word on quickfix
    nmap <silent> R :<C-u>exe("Gtags -r ".expand('<cword>'))<CR>
'''

[[plugins]]
repo = "tpope/vim-fugitive"
hook_add = '''
autocmd QuickFixCmdPost *grep* cwindow
nnoremap <silent> [Window]G :Git<CR>
'''

[[plugins]]
repo = "chrismccord/bclose.vim"
hook_add = '''
nnoremap <silent> [Window]q :<C-u>Bclose<CR>
'''

[[plugins]]
repo = "kana/vim-tabpagecd"

# [[plugins]]
# repo = "vim-ctrlspace/vim-ctrlspace"

[[plugins]]
repo = "airblade/vim-rooter"
hook_add = '''
let g:rooter_cd_cmd = "lcd"
'''

[[plugins]]
repo = 'yonchu/accelerated-smooth-scroll'

# [[plugins]]
# repo = 'yuttie/comfortable-motion.vim'

[[plugins]]
repo = 'equalsraf/neovim-gui-shim'

[[plugins]]
repo = 'vim-pandoc/vim-pandoc'
hook_add = '''
let g:pandoc#filetypes#pandoc_markdown = 0
let g:pandoc#modules#disabled = ["folding", "spell"]
'''

[[plugins]]
repo = 'vim-pandoc/vim-pandoc-syntax'
hook_add = '''
let g:pandoc#syntax#conceal#use = 0
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'skywind3000/asyncrun.vim'
hook_add = '''
let g:asyncrun_open = 6
let g:asyncrun_trim = 1
'''

# [[plugins]]
# repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_upper = 1
nmap ss <Plug>(easymotion-s2)
nmap f <Plug>(easymotion-lineanywhere)
vmap f <Plug>(easymotion-lineanywhere)
let g:EasyMotion_re_line_anywhere = '\v' .
    \       '(<.|^$)' . '|' .
    \       '(.>|^$)' . '|' .
    \       '(\l)\zs(\u)' . '|' .
    \       '(_\zs.)' . '|' .
    \       '(#\zs.)' . '|' .
    \       '\|'
nmap sj <Plug>(easymotion-bd-jk)
" let g:EasyMotion_keys = 'fjdksla;yuitreopwqvbncmxzFJDKSLA;YUITREOPWQVBNCMXZ'
let g:EasyMotion_keys = 'FJDKSLA;YUITREOPWQVBNCMXZ'
let g:EasyMotion_startofline = 0
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
" Linter
let g:ale_linters = {
    \ 'python': ['flake8'],
    \ }

" Fixer
let g:ale_fixers = {
    \ 'python': ['autopep8', 'black', 'isort'],
    \ }

" Path
let g:ale_python_flake8_executable = g:python3_host_prog
let g:ale_python_flake8_options = '-m flake8 --extend-ignore=E111,E114 --max-line-length 100'
let g:ale_python_autopep8_executable = g:python3_host_prog
let g:ale_python_autopep8_options = '-m autopep8'
let g:ale_python_isort_executable = g:python3_host_prog
let g:ale_python_isort_options = '-m isort'
let g:ale_python_black_executable = g:python3_host_prog
let g:ale_python_black_options = '-m black'
'''

[[plugins]]
repo = 'bfredl/nvim-miniyank'
hook_add = '''
map p <Plug>(miniyank-autoput)
xnoremap <expr> p 'pgv"'.v:register.'y`>'
map P <Plug>(miniyank-autoPut)
'''
# if = "IsWindows() || IsMac()"


[[plugins]]
repo = 'editorconfig/editorconfig-vim'

# [[plugins]]
# repo = 'nvim-treesitter/nvim-treesitter'
# if = 'has("nvim")'
# hook_post_update= 'TSUpdate'
# on_event = 'BufRead'
# hook_source = '''
# lua <<EOF
# require'nvim-treesitter.configs'.setup {
#   ensure_installed = "maintained", -- one of "all", "maintained" (parsers with maintainers), or a list of languages
#   -- highlight = {
#   --   enable = true,              -- false will disable the whole extension
#   --   disable = { "vue", "ruby" },  -- list of language that will be disabled
#   -- },
# }
# EOF
# '''
