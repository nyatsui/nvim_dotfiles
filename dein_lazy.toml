# [[plugins]]
# repo = 'Shougo/vimproc.vim'
# build = 'make'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("python3")'
on_event = 'InsertEnter'
hook_add = '''
let g:deoplete#enable_at_startup = 1

" <TAB>: completion.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#manual_complete()
function! s:check_back_space() abort "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

" <CR>: close popup and save indent.
inoremap <expr><CR>  pumvisible() ? deoplete#close_popup() : "<CR>"

" let g:deoplete#sources#jedi#worker_threads = 2
'''

hook_source = '''
call deoplete#custom#option('camel_case', v:true)
call deoplete#custom#option('refresh_always', v:true)
call deoplete#custom#option('auto_complete_delay', 0)
call deoplete#custom#option('async_timeout', 100)
'''

# [[plugins]]
# repo = 'zchee/deoplete-clang'
# hook_source = '''
# let g:deoplete#sources#clang#libclang_path = '/usr/local/Cellar/llvm/3.9.1/lib/libclang.dylib'
# let g:deoplete#sources#clang#clang_header = '/usr/local/Cellar/llvm/3.9.1/lib/clang/'
# '''
# on_ft = ['c', 'cpp', 'cmake']
# depends = ['deoplete.nvim']

# [[plugins]]
# repo = 'Valloric/YouCompleteMe'

# [[plugins]]
# repo = 'tweekmonster/deoplete-clang2'
# on_ft = ['c', 'cpp']
# on_event = 'InsertEnter'
# depends = 'deoplete.nvim'

[[plugins]]
repo = 'Shougo/deoplete-clangx'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
let g:jedi#completions_enabled = 0
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_event = 'InsertEnter'
on_ft = 'python'
hook_add = '''
let g:deoplete#sources#jedi#show_docstring = 0
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
if = 'has("python3")'
on_cmd = 'Denite'
hook_add = '''
nnoremap <silent> <C-u><C-t> :<C-u>Denite filetype<CR>
nnoremap <silent> <C-p> :<C-u>Denite file/rec<CR>
nnoremap <silent> sp :<C-u>Denite buffer/project file/rec<CR>
nnoremap <silent> sc :<C-u>DeniteBufferDir file/rec<CR>
nnoremap <silent> <C-b> :<C-u>Denite buffer<CR>
nnoremap <silent> sB :<C-u>Denite buffer<CR>
nnoremap <silent> sb :<C-u>Denite buffer/project<CR>
nnoremap <silent> sC :<C-u>DeniteBuffer buffer/project<CR>
nnoremap <silent> <C-u><C-j> :<C-u>Denite line<CR>
nnoremap <silent> <C-u><C-g> :<C-u>Denite grep<CR>
nnoremap <silent> <C-u><C-]> :<C-u>DeniteCursorWord grep<CR>
nnoremap <silent> <C-u><C-u> :<C-u>Denite file_mru<CR>
nnoremap <silent> <C-u><C-y> :<C-u>Denite neoyank<CR>
nnoremap <silent> <C-u><C-r> :<C-u>Denite -resume<CR>
" nnoremap <silent> <C-u>; :<C-u>Denite -resume -immediately -select=+1<CR>
" nnoremap <silent> <C-u>- :<C-u>Denite -resume -immediately -select=-1<CR>
" nnoremap <silent> <C-u><C-d> :<C-u>call denite#start([{'name': 'file/rec', 'args': ['~/dotfiles']}])<CR>
" nnoremap ml :<C-u>call denite#start([{'name': 'file/rec', 'args': [g:memolist_path]}])<CR>
 nnoremap <silent> s/ :<C-u>Denite -buffer-name=search -auto-highlight
        \ line<CR>
 nnoremap <silent> s* :<C-u>DeniteCursorWord -buffer-name=search
        \ -auto-highlight -mode=normal line<CR>
 nnoremap <silent> sg :<C-u>Denite -buffer-name=search
        \ -no-empty -mode=normal grep<CR>
 nnoremap <silent> sn :<C-u>Denite -buffer-name=search
        \ -resume -mode=normal -refresh<CR>
 nnoremap <silent> s;
        \ :<C-u>Denite command_history command <CR>
 " nnoremap <silent> <C-k> :<C-u>Denite -mode=normal change jump<CR>
'''
hook_post_source = '''
 if executable('pt')
   call denite#custom#var('file/rec', 'command',
  \ ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '--ignore=.git/*', (has('win32') ? '-g:' : '-g='), ''])
   call denite#custom#var('grep', 'command',
  \ ['pt', '--nogroup', '--nocolor', '--smart-case', '--hidden'])
   call denite#custom#var('grep', 'default_opts', [])
   call denite#custom#var('grep', 'recursive_opts', [])
 else
   call denite#custom#var('file/rec', 'command', ['scantree.py'])
 endif

 call denite#custom#source('file/rec', 'matchers',
 \ ['matcher/fruzzy'])
 call denite#custom#alias('source', 'file/rec/git', 'file/rec')
 call denite#custom#var('file/rec/git', 'command',
     \ ['git', 'ls-files', '-co', '--exclude-standard'])
 call denite#custom#source(
     \ 'file_mru', 'matchers', ['matcher/fruzzy', 'matcher_project_files'])
 call denite#custom#source('file_old', 'matchers',
      \ ['matcher/fruzzy', 'matcher_project_files'])
 call denite#custom#alias('source', 'buffer/project', 'buffer')
 call denite#custom#source('buffer/project', 'matchers',
      \ ['matcher/fruzzy', 'matcher_project_files', 'matcher/ignore_current_buffer'])
'''

[[plugins]]
repo = 'critiqjo/lldb.nvim'
on_ft = ['c', 'cpp']
hook_add = '''
    nmap <M-b> <Plug>LLBreakSwitch
    vmap <F2> <Plug>LLStdInSelected
    nnoremap <F4> :LLstdin<CR>
    nnoremap <F5> :LLmode debug<CR>
    nnoremap <S-F5> :LLmode code<CR>
    nnoremap <F8> :LL continue<CR>
    nnoremap <S-F8> :LL process interrupt<CR>
    nnoremap <F9> :LL print <C-R>=expand('<cword>')<CR>
    vnoremap <F9> :<C-U>LL print <C-R>=lldb#util#get_selection()<CR><CR>
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> [Window]N :<C-u>call deol#new({'command': 'bash'})<CR>
  nnoremap <silent> [Space]s :<C-u>Deol bash<CR>
  nnoremap <silent> [Window]D  :<C-u>call deol#kill_editor()<CR>
'''
hook_source = '''
  let g:deol#prompt_pattern = '\w*%'
  " autocmd FileType deol call s:on_deol()
  " function! s:on_deol() abort
  "   nnoremap <buffer><silent> [Space]gs :<C-u>call deol#send('git status')<CR>
  "   nnoremap <buffer><silent> [Space]gc :<C-u>call deol#send('git commit')<CR>
  "   nnoremap <buffer><silent> [Space]gA :<C-u>call deol#send('git commit --amend')<CR>
  " endfunction
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['denite.nvim']

# [[plugins]]
# repo = "huawenyu/neogdb.vim"
# on_ft = ['c', 'cpp']

[[plugins]]
repo = 'equalsraf/neovim-gui-shim'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_add = '''
let g:vim_markdown_folding_disabled = 1
" let g:vim_markdown_folding_level = 6
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_ft = ['markdown']
hook_add = '''
let g:table_mode_corner="|"
'''

# [[plugins]]
# repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_source = '''
let g:fruzzy#usenative = 1
let g:fruzzy#sortonempty = 0
'''
hook_post_update = 'call fruzzy#install()'

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

# [[plugins]]
# repo   = 'vim-scripts/renamer.vim'
# on_cmd = ['Renamer']

# [[plugins]]
# repo = 'bfredl/nvim-ipy'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
nnoremap <silent>   [Space]f
\ :<C-u>Defx -listed -resume -buffer-name=tab`tabpagenr()`<CR>

autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
 \ defx#async_action('drop')
  nnoremap <silent><buffer><expr> c
 \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> !
 \ defx#do_action('execute_command')
  nnoremap <silent><buffer> m m
  nnoremap <silent><buffer><expr> m
 \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
 \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
 \ defx#async_action('open_directory')
  nnoremap <silent><buffer><expr> E
 \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
 \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> o
 \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K
 \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
 \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
 \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> dd
 \ defx#do_action('remove_trash')
  nnoremap <silent><buffer><expr> r
 \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> x
 \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> >
 \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> .
 \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> yy
 \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> h
 \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
 \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> \
 \ defx#do_action('cd', getcwd())
  nnoremap <silent><buffer><expr> q
 \ defx#do_action('quit')
  nnoremap <silent><buffer> sq sq
  nnoremap <silent><buffer><expr> <Space>
 \ defx#do_action('toggle_select') . 'j'
  vnoremap <silent><buffer><expr> <Space>
 \ defx#do_action('toggle_select_visual')
  nnoremap <silent><buffer><expr> *
 \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
 \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
 \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
 \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
 \ defx#do_action('print')
  nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ?
 \ ':<C-u>wincmd w<CR>' :
 \ ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
endfunction
'''
